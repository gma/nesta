#!/usr/bin/env ruby

require 'getoptlong'

require File.expand_path('../lib/nesta/commands', File.dirname(__FILE__))

module Nesta
  class Cli
    def self.usage(exitcode=1)
      puts <<EOF
USAGE: #{File.basename($0)} [GLOBAL OPTIONS] <command> [COMMAND OPTIONS]

GLOBAL OPTIONS
    --help, -h            Display this message.
    --version, -v         Display version number.

COMMANDS
    new <path>            Create a new Nesta project.
    demo:content          Install example pages in ./content-demo.
    plugin:create <name>  Create a gem called nesta-plugin-name.
    theme:install <url>   Install a theme from a git repository.
    theme:enable <name>   Make the theme active, updating config.yml.
    theme:create <name>   Makes a template for a new theme in ./themes.

OPTIONS FOR new
    --git                 Create a new git repository for the project.
    --vlad                Include config/deploy.rb.

EOF
      exit exitcode
    end

    def self.version
      puts "Nesta #{Nesta::VERSION}"
      exit 0
    end

    def self.parse_command_line
      opts = GetoptLong.new(
        ['--git', GetoptLong::NO_ARGUMENT],
        ['--help', '-h', GetoptLong::NO_ARGUMENT],
        ['--version', '-v', GetoptLong::NO_ARGUMENT],
        ['--vlad', GetoptLong::NO_ARGUMENT]
      )
      options = {}
      opts.each do |opt, arg|
        case opt 
        when '--help'
          usage(exitcode=0)
        when '--version'
          version
        else
          options[opt.sub(/^--/, '')] = arg
        end
      end
      options
    rescue GetoptLong::InvalidOption => e
      $stderr.puts
      usage
    end

    def self.class_for_command(command)
      const_names = command.split(':').map { |word| word.capitalize }
      const_names.inject(Nesta::Commands) do |namespace, const|
        namespace.const_get(const)
      end
    end

    def self.main(options)
      command = ARGV.shift
      command.nil? && usage
      begin
        command_cls = class_for_command(command)
      rescue NameError
        usage
      else
        command_cls.new(ARGV[0], options).execute
      end
    rescue RuntimeError => e
      $stderr.puts "ERROR: #{e}"
      exit 1
    rescue Nesta::Commands::UsageError => e
      $stderr.puts "ERROR: #{e}"
      usage
    end
  end
end

Nesta::Cli.main(Nesta::Cli.parse_command_line)
